#lang planet neil/sicp

; Exercise 1.27

(define (square x)
  (* x x))

(define (pass-fermat n)
  (define (pf n a)
    (cond ((= (- n 1) a) #t)
          ((= (expmod a n n) a) (pf n (+ a 1)))
          (else #f)))
  (pf n 2))

;561, 1105, 1729, 2465, 2821, and 6601

(pass-fermat 561)
(pass-fermat 1105)
(pass-fermat 1729)


(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))   